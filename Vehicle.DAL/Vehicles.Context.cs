//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vehicle.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VehicleDbEntities : DbContext
    {
        public VehicleDbEntities()
            : base("name=VehicleDbEntities")
        {
           
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<VehicleMake> VehicleMakes { get; set; }
        public virtual DbSet<VehicleModel> VehicleModels { get; set; }
    
        public virtual ObjectResult<SpGetVehicles_Result> SpGetVehicles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetVehicles_Result>("SpGetVehicles");
        }
    
        public virtual int SpUpdateVehicle(Nullable<int> id, string name, string abrv, Nullable<int> makeId, string modelName, string modelAbrv)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var abrvParameter = abrv != null ?
                new ObjectParameter("Abrv", abrv) :
                new ObjectParameter("Abrv", typeof(string));
    
            var makeIdParameter = makeId.HasValue ?
                new ObjectParameter("MakeId", makeId) :
                new ObjectParameter("MakeId", typeof(int));
    
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            var modelAbrvParameter = modelAbrv != null ?
                new ObjectParameter("ModelAbrv", modelAbrv) :
                new ObjectParameter("ModelAbrv", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateVehicle", idParameter, nameParameter, abrvParameter, makeIdParameter, modelNameParameter, modelAbrvParameter);
        }
    
        public virtual int SpDeleteVehicle(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteVehicle", idParameter);
        }
    }
}
